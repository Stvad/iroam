{"version":3,"sources":["helpers.ts","pyodide.ts","api.ts","notebook.ts","keyboard.ts","index.ts"],"names":[],"mappings":"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","file":"pyroam.js","sourceRoot":"../src","sourcesContent":["/* ====== BASIC ======= */\nexport const sleep = (m) => {\n  var t = m ? m : 10;\n  return new Promise((r) => setTimeout(r, t));\n};\n\nexport const addElementToPage = (element, tagId, typeT) => {\n  try {\n    document.getElementById(tagId).remove();\n  } catch (e) { }\n  Object.assign(element, { type: typeT, async: false, tagId: tagId });\n  document.getElementsByTagName(\"head\")[0].appendChild(element);\n};\n\nexport const addScriptToPage = (tagId, script) => {\n  addElementToPage(\n    Object.assign(document.createElement(\"script\"), { src: script }),\n    tagId,\n    \"text/javascript\"\n  );\n};\n\nexport const createUid = () => {\n  // From roam42 based on https://github.com/ai/nanoid#js version 3.1.2\n  let nanoid = (t = 21) => {\n    let e = \"\",\n      r = crypto.getRandomValues(new Uint8Array(t));\n    for (; t--;) {\n      let n = 63 & r[t];\n      e +=\n        n < 36\n          ? n.toString(36)\n          : n < 62\n            ? (n - 26).toString(36).toUpperCase()\n            : n < 63\n              ? \"_\"\n              : \"-\";\n    }\n    return e;\n  };\n  return nanoid(9);\n};\n\nexport const getActiveBlockUid = () => {\n  const el = document.activeElement;\n  const uid = el.closest(\".rm-block__input\").id.slice(-9);\n  return uid;\n};\n\nexport const removeBackticks = (str: string) => {\n  var ttt = \"``\" + \"`\";\n  return str.replace(ttt + \"python\", \"\").replace(ttt, \"\");\n}\n\n/* ======== CODEBLOCK PROCESSING ======= */\nexport const processRawHtml = (rawHtml: string) => {\n  const withNewLines = rawHtml\n    .replace(/<div class=\"CodeMirror-linenumber.*?<\\/div>/gm, \"\\n\")\n\n  const output = new DOMParser().parseFromString(withNewLines, \"text/html\").documentElement.textContent.replace(/\\u200B/g, \"\");\n  return output.slice(1);\n}\n\nexport const getActiveCodeBlockContent = () => {\n  const el = document.activeElement;\n  const rawHtml = el.parentElement.parentElement.querySelector(\".CodeMirror-code\").outerHTML;\n  return processRawHtml(rawHtml);\n}\n\n/* ====== TREE PARSERS ====== */\nconst invertTree = (block, topUid) => {\n  var attachParent = (oldTopBlock) => {\n    var newTopBlock = oldTopBlock._children[0];\n    newTopBlock.child = oldTopBlock;\n    if (newTopBlock.uid === topUid) return newTopBlock;\n    return attachParent(newTopBlock)\n  }\n  var invertedTree = attachParent(block);\n\n  return invertedTree;\n}\n\nconst mergeTreesByUid = (topBlocks) => {\n  var latchOnto = (tree, topBlock) => {\n    var order = parseInt(topBlock.order) || 0;\n    if (!tree[order]) {\n      tree[order] = topBlock;\n      if (topBlock.child) {\n        tree[order].children = []\n        tree[order].children[topBlock.child.order] = topBlock.child\n      }\n    } if (topBlock.child && topBlock.uid === tree[order].uid) {\n      tree[order].children = latchOnto(tree[order].children || [], topBlock.child)\n    }\n\n    return tree;\n  }\n\n  var finalTree = [];\n  topBlocks.forEach(topBlock => {\n    finalTree = latchOnto(finalTree, topBlock)\n  });\n  return finalTree;\n}\n\nconst flatten = (tree) => {\n  var finalArray = []\n  var stepIn = (node) => {\n    finalArray.push(node)\n    if (node.children && node.children.length !== 0)\n      node.children.forEach(child => {\n        stepIn(child);\n      });\n  }\n  stepIn(tree);\n  return finalArray;\n}\n\nexport const processCodeBlocks = (codeblocks, uid) => {\n  var trees = codeblocks.map(codeblock => invertTree(codeblock[0], uid));\n  var tree = mergeTreesByUid(trees);\n  console.log(tree)\n  var cells = flatten(tree.filter(tr => tr)[0]);\n  cells = cells.filter(cell => cell.string && cell.string.startsWith(\"```python\"))\n    .map(cell => {\n      return {\n        uid: cell.uid,\n        string: removeBackticks(cell.string)\n      }\n    })\n  return cells;\n}","//@ts-nocheck\nimport { sleep, addScriptToPage } from \"./helpers\";\n\nexport const loadPyodide = async () => {\n  addScriptToPage(\n    \"pyodide\",\n    \"https://cdn.jsdelivr.net/pyodide/v0.16.1/full/pyodide.js\"\n  );\n\n  await sleep(2000);\n\n  await languagePluginLoader;\n\n  console.log(\"pyodide successfully loaded.\");\n\n  // setup pyodide environment to run code blocks as needed\n  const setup_code = `\nimport sys, io, traceback\nnamespace = {}  # use separate namespace to hide run_code, modules, etc.\ndef run_code(code):\n  \"\"\"run specified code and return stdout and stderr\"\"\"\n  out = io.StringIO()\n  oldout = sys.stdout\n  olderr = sys.stderr\n  sys.stdout = sys.stderr = out\n  try:\n      # change next line to exec(code, {}) if you want to clear vars each time\n      exec(code, namespace)\n  except:\n      traceback.print_exc()\n\n  sys.stdout = oldout\n  sys.stderr = olderr\n  return out.getvalue()\n`;\n  pyodide.runPython(setup_code);\n\n  await pyodide.loadPackage([\n    \"numpy\",\n    \"matplotlib\",\n    \"scipy\",\n  ]);\n  console.log(\"Loaded packages: \");\n  console.log(pyodide.loadedPackages);\n};\n\nexport const runPython = async (code) => {\n  if (!code) return;\n  pyodide.globals.code_to_run = code;\n  var out = await pyodide.runPythonAsync(\"run_code(code_to_run)\");\n  return out;\n};\n","import { createUid, processCodeBlocks } from \"./helpers\";\n\n/* === WRAPPERS === */\nexport const q = async (query) => {\n  //@ts-ignore\n  const result = await window.roamAlphaAPI.q(query);\n  if (!result || result.length === 0) {\n    return null;\n  } else return result;\n};\n\nexport const updateBlock = async (uid, string) => {\n  //@ts-ignore\n  await window.roamAlphaAPI.updateBlock({\n    block: {\n      uid: uid,\n      string: string,\n    },\n  });\n};\n\nexport const createBlock = async (parentUid, order, uid, string) => {\n  //@ts-ignore\n  await window.roamAlphaAPI.createBlock({\n    location: {\n      \"parent-uid\": parentUid,\n      order: order,\n    },\n    block: {\n      uid: uid,\n      string: string,\n    },\n  });\n};\n\n/* === COMPOSITE FUNCTIONS === */\nexport const getBlockStringByUid = async (uid) => {\n  const query = `[:find (pull ?block [:block/string])\n         :where [?block :block/uid \"${uid}\"]]`;\n  const result = await q(query);\n\n  return result[0][0].string;\n}\nexport const writeToNestedBlock = async (parentUid, string) => {\n  if (!string) return;\n\n  const query = `\n  [:find \n    (pull ?nestedBlock \n        [:block/uid])\n   :where\n    [?parentBlock :block/uid \"${parentUid}\"]\n    [?parentBlock :block/children ?nestedBlock]]`;\n\n  const result = await q(query);\n  if (!result) {\n    const nestedUid = createUid();\n    createBlock(parentUid, 0, nestedUid, string);\n  } else {\n    const nestedUid = result[0][0].uid;\n    updateBlock(nestedUid, string);\n  }\n};\n\nexport const getUidOfClosestBlockReferencing = async (uid: string, page: string) => {\n  //@ts-ignore\n  const results = await q(`[:find \n  (pull ?notebookBlock [:block/uid]) \n  :where  [?notebookBlock :block/refs ?pyroamNotebook]\n          [?pyroamNotebook :node/title \"${page}\"]\n          [?activeBlock :block/parents ?notebookBlock]\n          [?activeBlock :block/uid \"${uid}\"]]`);\n  //@ts-ignore\n  if (results) return results[0][0].uid;\n  else {\n    const page = await q(`[:find \n    (pull ?page [:block/uid])\n    :where [?page :node/title]\n           [?activeBlock :block/uid \"${uid}\"] \n           [?activeBlock :block/parents ?page]]`)\n\n    return page[0][0].uid;\n  }\n};\n\nexport const getAllCodeBlocksNestedUnder = async (topUid) => {\n  //@ts-ignore\n  var results = await window.roamAlphaAPI.q('[:find\\\n    (pull ?cell [:block/string :block/order :block/uid {:block/_children ...}])\\\n    :where  [?notebookBlock :block/uid \"' + topUid + '\"]\\\n            [?cell :block/parents ?notebookBlock]\\\n            [?cell :block/string ?string]\\\n            [(clojure.string/starts-with? ?string \"```python\")]]');\n  const cells = processCodeBlocks(results, topUid);\n  return cells;\n};","import { getActiveBlockUid, getActiveCodeBlockContent as getActiveCodeBlockContent, removeBackticks } from \"./helpers\";\nimport { q, writeToNestedBlock, getUidOfClosestBlockReferencing, getAllCodeBlocksNestedUnder, getBlockStringByUid } from \"./api\";\nimport { runPython } from \"./pyodide\";\n\n\nconst runAllBlocksBelowUidAndWrite = async (notebookUid) => {\n    const cells = await getAllCodeBlocksNestedUnder(notebookUid);\n    const activeUid = getActiveBlockUid();\n\n    for (const cell of cells) {\n        if (cell.uid === activeUid) cell.string = getActiveCodeBlockContent()\n\n        const out = await runPython(cell.string);\n        await writeToNestedBlock(cell.uid, out)\n    }\n}\n\n/**\n * Runs only the active cell\n */\nexport const runActiveBlockAndWriteToNext = async () => {\n    const activeUid = getActiveBlockUid();\n    const code = getActiveCodeBlockContent()\n    const out = await runPython(code)\n    await writeToNestedBlock(activeUid, out)\n};\n\n/**\n * Runs the whole notebook\n */\nexport const runActiveNotebook = async () => {\n    const uid = getActiveBlockUid();\n    const notebookUid = await getUidOfClosestBlockReferencing(uid, \"pyroam/notebook\");\n    console.log(\"Notebook Block uid:\" + notebookUid)\n    runAllBlocksBelowUidAndWrite(notebookUid);\n}","\nimport { runActiveBlockAndWriteToNext, runActiveNotebook } from \"./notebook\";\n\nexport const handleKeyPress = async (e) => {\n  if (e.code === \"Enter\" && e.altKey === true && !e.shiftKey) {\n    runActiveBlockAndWriteToNext();\n  } else if (e.code === \"Enter\" && e.altKey === true && e.shiftKey === true) {\n    runActiveNotebook();\n  }\n};\n","import { loadPyodide } from \"./pyodide\";\nimport { handleKeyPress } from \"./keyboard\";\n\nconsole.log(\"Loading pyroam.\");\n\nloadPyodide();\n\ndocument.addEventListener(\"keydown\", handleKeyPress);\n"]}