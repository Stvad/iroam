{"version":3,"sources":["helpers.ts","pyodide.ts","api.ts","keyboard.ts","index.ts"],"names":[],"mappings":";AA0Ca,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,QAAA,UAAA,QAAA,gBAAA,QAAA,iBAAA,QAAA,WAAA,EA1CN,IAAM,EAAQ,SAAC,GAChB,IAAA,EAAI,GAAQ,GACT,OAAA,IAAI,QAAQ,SAAC,GAAM,OAAA,WAAW,EAAG,MAF7B,QAAA,MAAK,EAKX,IAAM,EAAmB,SAAC,EAAS,EAAO,GAC3C,IACF,SAAS,eAAe,GAAO,SAC/B,MAAO,IACT,OAAO,OAAO,EAAS,CAAE,KAAM,EAAO,OAAO,EAAO,MAAO,IAC3D,SAAS,qBAAqB,QAAQ,GAAG,YAAY,IAL1C,QAAA,iBAAgB,EAQtB,IAAM,EAAkB,SAAC,EAAO,GACrC,QAAA,iBACE,OAAO,OAAO,SAAS,cAAc,UAAW,CAAE,IAAK,IACvD,EACA,oBAJS,QAAA,gBAAe,EAQrB,IAAM,EAAY,WAkBhB,OAhBM,SAAC,QAAA,IAAA,IAAA,EAAA,IAGL,IAFH,IAAA,EAAI,GACN,EAAI,OAAO,gBAAgB,IAAI,WAAW,IACrC,KAAO,CACR,IAAA,EAAI,GAAK,EAAE,GACf,GACE,EAAI,GACA,EAAE,SAAS,IACX,EAAI,IACH,EAAI,IAAI,SAAS,IAAI,cACtB,EAAI,GACJ,IACA,IAED,OAAA,EAEF,CAAO,IAlBH,QAAA,UAAS,EAqBf,IAAM,EAAoB,WAGxB,OAFI,SAAS,cACL,QAAQ,oBAAoB,GAAG,OAAO,IAF1C,QAAA,kBAAiB;;ACIjB,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA9Cb,QAAA,UAAA,QAAA,iBAAA,EACA,IAAA,EAAA,QAAA,aAEa,EAAc,WAAA,OAAA,OAAA,OAAA,OAAA,EAAA,WA2Cd,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EArCX,OALA,EAAA,gBACE,UACA,4DAGF,CAAA,EAAM,EAAA,MAAM,MAqCD,KAAA,EAnCX,OAFA,EAAA,OAEA,CAAA,EAAM,sBAmCK,KAAA,EATX,OA1BA,EAAA,OAEA,QAAQ,IAAI,gCAGO,ogBAmBnB,QAAQ,UAnBW,qgBAqBnB,CAAA,EAAM,QAAQ,YAAY,CACxB,QACA,aACA,WAMS,KAAA,EAAA,OATX,EAAA,OAKA,QAAQ,IAAI,qBACZ,QAAQ,IAAI,QAAQ,gBAGT,CAAA,SA3CA,QAAA,YAAW,EA2CjB,IAAM,EAAY,SAAO,GAAI,OAAA,OAAA,OAAA,OAAA,EAAA,WAAvB,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAED,OADV,QAAQ,QAAQ,YAAc,EACpB,CAAA,EAAM,QAAQ,eAAe,0BAF5B,KAAA,EAGX,MAAA,CAAA,EADU,EAAA,cAFC,QAAA,UAAS;;ACVT,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,YAAA,QAAA,YAAA,QAAA,OAAA,EApCb,IAAA,EAAA,QAAA,aAGa,EAAI,SAAO,GAAK,OAAA,OAAA,OAAA,OAAA,EAAA,WAiChB,IAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA/BI,MAAA,CAAA,EAAM,OAAO,aAAa,EAAE,IA+BhC,KAAA,EA9BP,OADE,EAAS,EAAA,SACkB,IAAlB,EAAO,OAEf,CAAA,EAAO,GADZ,CAAA,EAAO,YAJE,QAAA,EAAC,EAQP,IAAM,EAAc,SAAO,EAAK,GAAM,OAAA,OAAA,OAAA,OAAA,EAAA,WAyBhC,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAvBX,MAAA,CAAA,EAAM,OAAO,aAAa,YAAY,CACpC,MAAO,CACL,IAAK,EACL,OAAQ,MAoBD,KAAA,EAAA,OAvBX,EAAA,OAuBW,CAAA,SAzBA,QAAA,YAAW,EAUjB,IAAM,EAAc,SAAO,EAAW,EAAO,EAAK,GAAM,OAAA,OAAA,OAAA,OAAA,EAAA,WAelD,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAbX,MAAA,CAAA,EAAM,OAAO,aAAa,YAAY,CACpC,SAAU,CACM,aAAA,EACd,MAAO,GAET,MAAO,CACL,IAAK,EACL,OAAQ,MAMD,KAAA,EAAA,OAbX,EAAA,OAaW,CAAA,SAfA,QAAA,YAAW,EAejB,IAAM,EAAmB,SAAO,EAAK,GAAM,OAAA,OAAA,OAAA,OAAA,EAAA,WAArC,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAWI,OAVT,EAAQ,iNAQU,EAAG,MAEZ,CAAA,EAAM,QAAA,EAAE,IAXZ,KAAA,EAAA,OAWL,EAAS,EAAA,SACF,QAAQ,IAAI,4BAErB,EAAQ,EAAO,GAAG,GAClB,EAAS,EAAM,UAAU,IACzB,EAAW,EAAO,UAER,KAAK,SAAC,GAAY,OAAA,EAAQ,MAAQ,EAAM,SAI9C,EAAc,EAAS,OAC3B,SAAC,GAAY,OAAA,EAAQ,QAAU,EAAM,MAAQ,IAC7C,GACF,QAAA,YAAY,EAAY,IAAK,KANvB,EAAS,EAAA,YACf,QAAA,YAAY,EAAO,IAAK,EAAM,MAAQ,EAAG,EAAQ,IApBxC,CAAA,SAAA,QAAA,iBAAgB;;AChBhB,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EApBb,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,SACA,EAAA,QAAA,aAEI,EAA+B,WAAA,OAAA,OAAA,OAAA,OAAA,EAAA,WAgBtB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAXI,OAJT,EAAM,EAAA,oBAEN,EAAQ,6EACsB,EAAG,MACxB,CAAA,EAAM,EAAA,EAAE,IAWZ,KAAA,EALD,OANJ,EAAS,EAAA,OAEX,EAAU,EAAO,GAAG,GAAG,OAEjB,MACN,EAAO,EAAQ,QAAQ,YAAgB,IAAI,QADrC,MACkD,IAClD,CAAA,EAAM,EAAA,UAAU,IAKf,KAAA,EAHX,OAFI,EAAM,EAAA,OAEV,CAAA,EAAM,EAAA,iBAAiB,EAAK,GAAO,KAGxB,KAAA,EAAA,OAHX,EAAA,OAGW,CAAA,SAAA,EAAiB,SAAO,GAAC,OAAA,OAAA,OAAA,OAAA,EAAA,WAAzB,OAAA,EAAA,KAAA,SAAA,GAAA,MACG,SAAV,EAAE,MAA+B,GAAZ,EAAE,QACzB,IAFS,CAAA,QAAA,QAAA,eAAc;;ACZ3B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,cAGA,QAAQ,IAAI,mBAEZ,EAAA,cAEA,SAAS,iBAAiB,UAAW,EAAA","file":"pyroam.js","sourceRoot":"../src","sourcesContent":["export const sleep = (m) => {\n  var t = m ? m : 10;\n  return new Promise((r) => setTimeout(r, t));\n};\n\nexport const addElementToPage = (element, tagId, typeT) => {\n  try {\n    document.getElementById(tagId).remove();\n  } catch (e) {}\n  Object.assign(element, { type: typeT, async: false, tagId: tagId });\n  document.getElementsByTagName(\"head\")[0].appendChild(element);\n};\n\nexport const addScriptToPage = (tagId, script) => {\n  addElementToPage(\n    Object.assign(document.createElement(\"script\"), { src: script }),\n    tagId,\n    \"text/javascript\"\n  );\n};\n\nexport const createUid = () => {\n  // From roam42 based on https://github.com/ai/nanoid#js version 3.1.2\n  let nanoid = (t = 21) => {\n    let e = \"\",\n      r = crypto.getRandomValues(new Uint8Array(t));\n    for (; t--; ) {\n      let n = 63 & r[t];\n      e +=\n        n < 36\n          ? n.toString(36)\n          : n < 62\n          ? (n - 26).toString(36).toUpperCase()\n          : n < 63\n          ? \"_\"\n          : \"-\";\n    }\n    return e;\n  };\n  return nanoid(9);\n};\n\nexport const getActiveBlockUid = () => {\n  const el = document.activeElement;\n  const uid = el.closest(\".rm-block__input\").id.slice(-9);\n  return uid;\n};\n","//@ts-nocheck\nimport { sleep, addScriptToPage } from \"./helpers\";\n\nexport const loadPyodide = async () => {\n  addScriptToPage(\n    \"pyodide\",\n    \"https://cdn.jsdelivr.net/pyodide/v0.16.1/full/pyodide.js\"\n  );\n\n  await sleep(2000);\n\n  await languagePluginLoader;\n\n  console.log(\"pyodide successfully loaded.\");\n\n  // setup pyodide environment to run code blocks as needed\n  const setup_code = `\nimport sys, io, traceback\nnamespace = {}  # use separate namespace to hide run_code, modules, etc.\ndef run_code(code):\n  \"\"\"run specified code and return stdout and stderr\"\"\"\n  out = io.StringIO()\n  oldout = sys.stdout\n  olderr = sys.stderr\n  sys.stdout = sys.stderr = out\n  try:\n      # change next line to exec(code, {}) if you want to clear vars each time\n      exec(code, namespace)\n  except:\n      traceback.print_exc()\n\n  sys.stdout = oldout\n  sys.stderr = olderr\n  return out.getvalue()\n`;\n  pyodide.runPython(setup_code);\n\n  await pyodide.loadPackage([\n    \"numpy\",\n    \"matplotlib\",\n    \"scipy\",\n  ]);\n  console.log(\"Loaded packages: \");\n  console.log(pyodide.loadedPackages;\n};\n\nexport const runPython = async (code) => {\n  pyodide.globals.code_to_run = code;\n  var out = await pyodide.runPythonAsync(\"run_code(code_to_run)\");\n  return out;\n};\n","import { createUid } from \"./helpers\";\n\n/* === WRAPPERS === */\nexport const q = async (query) => {\n  //@ts-ignore\n  const result = await window.roamAlphaAPI.q(query);\n  if (!result || result.length === 0) {\n    return null;\n  } else return result;\n};\n\nexport const updateBlock = async (uid, string) => {\n  //@ts-ignore\n  await window.roamAlphaAPI.updateBlock({\n    block: {\n      uid: uid,\n      string: string,\n    },\n  });\n};\n\nexport const createBlock = async (parentUid, order, uid, string) => {\n  //@ts-ignore\n  await window.roamAlphaAPI.createBlock({\n    location: {\n      \"parent-uid\": parentUid,\n      order: order,\n    },\n    block: {\n      uid: uid,\n      string: string,\n    },\n  });\n};\n\n/* === COMPOSITE FUNCTIONS === */\nexport const writeToNextBlock = async (uid, string) => {\n  const query = `\n  [:find \n    (pull ?block \n        [:block/order \n        {:block/_children \n            [:block/uid \n            {:block/children [:block/uid :block/order]}]}])\n   :where\n    [?block :block/uid \"${uid}\"]]`;\n\n  const result = await q(query);\n  if (!result) console.log(\"Couldn't find the block.\");\n\n  var block = result[0][0];\n  var parent = block._children[0];\n  var siblings = parent.children;\n\n  if (!siblings.some((sibling) => sibling.order > block.order)) {\n    const newUid = createUid();\n    createBlock(parent.uid, block.order + 1, newUid, string);\n  } else {\n    const nextSibling = siblings.filter(\n      (sibling) => sibling.order === block.order + 1\n    )[0];\n    updateBlock(nextSibling.uid, string);\n  }\n};\n","import { getActiveBlockUid } from \"./helpers\";\nimport { q, writeToNextBlock } from \"./api\";\nimport { runPython } from \"./pyodide\";\n\nvar runActiveBlockAndWriteToNext = async () => {\n  const uid = getActiveBlockUid();\n\n  const query = `[:find (pull ?block [:block/string])\n         :where [?block :block/uid \"${uid}\"]]`;\n  const result = await q(query);\n\n  var content = result[0][0].string;\n\n  var ttt = \"``\" + \"`\";\n  var code = content.replace(ttt + \"python\", \"\").replace(ttt, \"\");\n  var out = await runPython(code);\n\n  await writeToNextBlock(uid, out || \"\");\n};\n\nexport const handleKeyPress = async (e) => {\n  if (e.code == \"Enter\" && e.altKey == true) {\n    runActiveBlockAndWriteToNext();\n  }\n};\n","import { loadPyodide } from \"./pyodide\";\nimport { handleKeyPress } from \"./keyboard\";\nimport { writeToNextBlock } from \"./api\";\n\nconsole.log(\"Loading pyroam.\");\n\nloadPyodide();\n\ndocument.addEventListener(\"keydown\", handleKeyPress);\n"]}